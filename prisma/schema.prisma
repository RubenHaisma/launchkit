// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  stripeCustomerId String?   @unique
  stripePriceId    String?
  stripeCurrentPeriodEnd DateTime?
  plan             String    @default("free") // free, pro, growth
  credits          Int       @default(50)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  campaigns   Campaign[]
  posts       Post[]
  newsletters Newsletter[]
  generations Generation[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String   // email, twitter, launch
  status    String   @default("draft") // draft, active, paused, completed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails Email[]

  @@map(name: "campaigns")
}

model Email {
  id         String    @id @default(cuid())
  campaignId String
  subject    String
  body       String    @db.Text
  status     String    @default("draft") // draft, sent, failed
  sentAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map(name: "emails")
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  platform    String    // twitter, reddit, linkedin
  content     String    @db.Text
  title       String?
  scheduled   DateTime?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "posts")
}

model Newsletter {
  id        String    @id @default(cuid())
  userId    String
  subject   String
  content   String    @db.Text
  sent      Boolean   @default(false)
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "newsletters")
}

model Generation {
  id        String   @id @default(cuid())
  userId    String
  type      String   // tweet, email, blog, launch
  prompt    String   @db.Text
  content   String   @db.Text
  tone      String?
  audience  String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "generations")
}