generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  stripeCustomerId       String?         @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  plan                   String          @default("free")
  credits                Int             @default(50)
  status                 String          @default("active") // active, inactive, banned
  isAdmin                Boolean         @default(false)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  accounts               Account[]
  sessions               Session[]
  apiUsage               ApiUsage[]
  campaigns              Campaign[]
  generations            Generation[]
  newsletters            Newsletter[]
  posts                  Post[]
  userStats              UserStats?
  businessProfile        BusinessProfile?
  userActivity           UserActivity[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String
  status    String   @default("draft")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails    Email[]

  @@map("campaigns")
}

model Email {
  id         String    @id @default(cuid())
  campaignId String
  subject    String
  body       String
  status     String    @default("draft")
  sentAt     DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("emails")
}

model Post {
  id          String    @id @default(cuid())
  userId      String
  platform    String
  content     String
  title       String?
  scheduled   DateTime?
  published   Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Newsletter {
  id        String    @id @default(cuid())
  userId    String
  subject   String
  content   String
  sent      Boolean   @default(false)
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("newsletters")
}

model Generation {
  id        String   @id @default(cuid())
  userId    String
  type      String
  prompt    String
  content   String
  tone      String?
  audience  String?
  model     String?
  tokens    Int?
  cost      Decimal? @db.Decimal(10, 6)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("generations")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_users")
}

model UserStats {
  id               String    @id @default(cuid())
  userId           String    @unique
  totalGenerations Int       @default(0)
  totalTokens      Int       @default(0)
  totalCost        Decimal   @default(0) @db.Decimal(10, 6)
  lastActiveAt     DateTime  @default(now())
  planUpgradedAt   DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model ApiUsage {
  id           String   @id @default(cuid())
  provider     String
  model        String
  endpoint     String
  tokens       Int
  cost         Decimal  @db.Decimal(10, 6)
  responseTime Int?     // Response time in milliseconds
  success      Boolean  @default(true)
  errorMessage String?
  userId       String?
  createdAt    DateTime @default(now())
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_usage")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model BusinessProfile {
  id                  String    @id @default(cuid())
  userId              String    @unique
  businessName        String?
  website             String?
  industry            String?
  description         String?
  targetAudience      String?
  businessModel       String?
  monthlyRevenue      String?
  teamSize            String?
  founded             String?
  location            String?
  competitors         String[]
  uniqueValueProp     String?
  mainChallenges      String[]
  goals               String[]
  socialMediaLinks    Json?
  websiteData         Json?
  lastScrapedAt       DateTime?
  isSetupComplete     Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

model SystemMetrics {
  id              String   @id @default(cuid())
  metricType      String   // cpu, memory, disk, database, etc.
  value           Decimal  @db.Decimal(10, 4)
  unit            String   // percentage, bytes, milliseconds, etc.
  timestamp       DateTime @default(now())
  additionalData  Json?    // For storing extra metric details

  @@map("system_metrics")
}

model UserActivity {
  id          String   @id @default(cuid())
  userId      String
  activity    String   // login, logout, generation, post_created, etc.
  description String?
  metadata    Json?    // Additional activity details
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity")
}

model StripeWebhook {
  id                String   @id @default(cuid())
  stripeEventId     String   @unique
  eventType         String
  processed         Boolean  @default(false)
  data              Json
  customerId        String?
  subscriptionId    String?
  amount            Int?     // Amount in cents
  currency          String?
  status            String?
  createdAt         DateTime @default(now())

  @@map("stripe_webhooks")
}

model SystemLogs {
  id        String   @id @default(cuid())
  level     String   // info, warning, error, debug
  service   String   // api, database, auth, ai, etc.
  message   String
  details   Json?
  userId    String?
  timestamp DateTime @default(now())

  @@map("system_logs")
}
